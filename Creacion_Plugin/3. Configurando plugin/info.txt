1. Introduccion 
Que es un Plug In ?
-Es un extracto de codigo que se introduce en el wordpress para darle un funcionamiento extra

Como funcionan los Plug ins?
- Los plugins ingresan codigo que son leidos antes del archivo functions y la plantilla del sitio. haciendo que estos codigos alteren el funcionamiento normal del Wordpress

Importancia de los plugins 
- Los plugins nos ayudan a poder agregar secciones desarrolladass ya por terceros. Tambien nos ayudan a encapsular funcionalidades de nuestro sitio 


2. Herramientas de trabajo

-Administrador de wordpress
Editor de texto
-Plugin Wp editor


3. Configurando el archivo inicial de un Plugin
-Al igual que los temas con style.css  los plugins se configuran a traves de un comentario

* Todo esta documentado en el codex de wordpress que es la documentacion oficial

Guardar el archivo dentro de una misma carpeta con el mismo nombre y subirlo en wordpress como si fuera un plugin en formato zipeado

History-> history.php 

define('FS_METHOD', 'direct');: Esta constante sirve para evitar establecer credenciales FTP
e instlar el plugin  plugins sin necesidad de tener cliente ftp

4. Creando una pagina de opciones

//Define tus variables globales para tus rutas
define('C7HD_ROOTDIR', plugin_dir_path(__FILE__));
define('C7HD_URLPLUGIN', plugin_dir_url(__FILE__));


plugin_dir_path(__FILE__)
Tu puedes usar esta funcion siempre cuando la necesites pero se recomienda usarla en una variable para no usar la funcion en cada momento y no consumir recursos

Un buen consejo a la hora de crear un plugin es separar todo en diferentes archivos

por ejemplo

history-setting.php (Todo el codigo necesario para el panel de administracion)

Lo guardamos con un simple require usando la ruta

require_once(C7HD_ROOTDIR.'history-setting.php');

dentro del history-setting.php agregar una funcion que permita agregar esa opcion al menu

function c7hd_customer_options() {
	add_options_page('history developer','History', 'manage_options', 'c7hd', 'c7hd_settings_page') opcion que da wordpress para agregar una opcion al menu

	1er parametro: titulo de la pagina
	2do parametro: como aparecera en el menu
	3er parametro: permisos
		manage_options: encargado de manejar todas las opciones del menu
	4to parametro: url o slug
	5to y mas importante: que funcion va a leer

	esta opcion vamos a agregar un hook

	add_action('admin_menu', 'c7hd_customer_options');
	hook: funcion que se ejecutar√° cuando pase algo

	hay diferentes hooks para levantar funciones cuando publicas un post.
	cuando actualizas, cuando te logueas, cuando eliminas un usuario
}

Funcion que va a leer el hook 

function c7hd_settings_page() {

 echo '<h1>History Developer<h1>';
	
}

consejo: siempre usar alias antes de todas las funciones que se creen en este caso el alias es "c7hd"
Esto para que no haya algun conflicto con otros plugins

5. Agregando estilos y scripts

Mala practica: llenar el Wordpress con puros echos
Es recomendable poner prefijos en las clases de estilos para no hacer conflictos con otros plugins



//Funcion para agregar CSS
/*parametros
alias
ruta
false header
true footer
*/
function c7_admin_assets() {
	wp_enqueue_style('c7_admin_css', C7HD_URLPLUGIN .'assets/css/main.css', false, '1.0');
}

add_action('admin_enqueue_scripts', 'c7_admin_assets');
//agrega la funcion de estilos justo cuando carga los scripts con el hook

//hook ejecutar funciones cuando WordPress haga algo
require_once(C7HD_ROOTDIR.'history-setting.php');



6. Guardando datos en la tabla options


<form action="options.php" method="post">
 	<?php 
 	settings_fields('c7_fields_options');
 	//brinda todas las opciones necesarias para que pueda almacenar datos 
 	//tiene que estar adentro de la etiqueta form 
 	//Creamos un grupo de campos que estaran guradados bajo esta funcion
 	?>

 	<div class="c7-form-group">
 		<label for="c7_note">Ingresar tu nota</label>
 		<textarea name="c7_note" id="c7_note" class="c7-input"></textarea>
 	</div>
 	<?php submit_button(); ?>
 </form>
 <?php
  $nota= get_option("c7_note"); 
  echo "Nota: ".$nota;
  ?>


function c7_customer_register_settings() {
	register_setting('c7_fields_options', 'c7_note'); //se encarga de registrar cambios en la base de datos
	/*
		primer parametro: grupo que creaste dentro del form
		segundo parametro: nombre del campo en este caso del textarea
	*/
}
// hook para almacenarlo
add_action('admin_init', 'c7_customer_register_settings');